@page "/payment"
@inject IJSRuntime js
@layout EmptyLayout
@inject RealtimeService realTime
@inject IUnitOfWork unitOfwork
@inject NavigationManager nav
@using Microsoft.AspNetCore.WebUtilities @*for QueryHelpers*@

<div class="mysr-form" style="position:relative;padding-top:100px;"></div>

<style>
    body {
        text-align: center;
        padding: 40px 0;
        background: #EBF0F5;
    }

    h1 {
        color: #88B04B;
        font-family: "Nunito Sans", "Helvetica Neue", sans-serif;
        font-weight: 900;
        font-size: 40px;
        margin-bottom: 10px;
    }

    p {
        color: #404F5E;
        font-family: "Nunito Sans", "Helvetica Neue", sans-serif;
        font-size: 20px;
        margin: 0;
    }

    i {
        color: #9ABC66;
        font-size: 100px;
        line-height: 200px;
        margin-left: -15px;
    }

    .card {
        background: white;
        padding: 60px;
        border-radius: 4px;
        box-shadow: 0 2px 3px #C8D0D8;
        display: inline-block;
        margin: 0 auto;
    }
</style>

@if (Id != null && Status == "paid")
{
    <div class="card">
        <div style="border-radius:200px; height:200px; width:200px; background: #F8FAF5; margin:0 auto;">
            <i class="checkmark">✓</i>
        </div>
        <h1>نجاح</h1>
        <p>تم الدفع بنجاح <br /> @Id رقم طلبك </p>
    </div>

}

@if (Id != null && Status == "failed")
{
    <div style="color:red" class="card">
        <div style="border-radius:200px; height:200px; width:200px; background: #F8FAF5; margin:0 auto;">
            <i style="color:red" class="checkmark">X</i>
        </div>
        <h1 style="color:red">فشل</h1>
        <p style="color:red">فشلت عملية الدفع <br />  </p>
    </div>
}

@code{
    public TotalOrderModel TotalOrderModel { get; set; } = new TotalOrderModel();
    private List<OrderModel> orderModels = new List<OrderModel>();
    private int totalPrice = 0;
    public string Id { get; set; }
    [Parameter]
    public string Status { get; set; }
    [Parameter]
    public int Amount { get; set; }
    [Parameter]
    public string Message { get; set; }


    protected override void OnAfterRender(bool firstRender)
    {
        if (Id == null)
        {
            js.InvokeVoidAsync("Pay", totalPrice, "test", $"{nav.BaseUri}payment");

        }

        if (Status == "paid")
        {
            orderModels.ForEach(w => { TotalOrderModel.TotalPrice += w.Price; });
            TotalOrderModel.IdUser = realTime.GetCurrentUser().Result;

            var totalOrder = unitOfwork.TotalOrderRepository.Add(TotalOrderModel);
            unitOfwork.Complete();
            orderModels.ForEach(w => {
                if (!w.Paid) {
                    w.IdTotalOrder = totalOrder.Id;
                    w.IdUser = realTime.GetCurrentUser().Result;
                    w.Paid = true; unitOfwork.OrderRepository.Update(w);
                }

            });
            unitOfwork.Complete();

        }

    }



    protected async override Task OnInitializedAsync()
    {
        var uri = nav.ToAbsoluteUri(nav.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var id))
        {
            Id = id.First();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("status", out var status))
        {
            Status = status.First();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("amount", out var amount))
        {
            Amount = int.Parse(amount.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("message", out var message))
        {
            Message = message.First();
        }


        if (realTime.GetCurrentUser().Result != null)
        {

            await unitOfwork.ProductRepository.GetALL();
            orderModels = unitOfwork.OrderRepository.GetAll(await realTime.GetCurrentUser());

            orderModels.ForEach(w => { if (!w.Paid) totalPrice += w.Price; });

        }




    }

}