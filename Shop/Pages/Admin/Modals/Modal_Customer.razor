@inject IUnitOfWork UnitOfwork
@inject IJSRuntime jsRuntime

<div id="modal_customer" class="modal fade" style="direction: ltr; display: none;">
    <form class="ajax">
        <input type="hidden">
        <div class="modal-dialog" style="direction: rtl;">
            <div class="modal-content">
                <div class="modal-header bg-info">
                    <button type="button" class="close" data-dismiss="modal">×</button>
                    <h6 class="modal-title">تعديل معلومات المستخدم ( @User.Name )</h6>
                </div>
                <div class="modal-body">

                    <div class="form-group" id="first_name_div">
                        <label>الاسم الأول</label>
                        <input @bind-value="ApplicationUser.Name" type="text" class="form-control right-border" placeholder="الاسم الأول">
                        <span class="error help-block" style="display:none;"> حقل الإسم الأول مطلوب </span>
                    </div>

                    <div class="form-group">
                        <label>البريد الالكتروني</label>
                        <input @bind-value="ApplicationUser.Email" type="text" class="form-control right-border" placeholder="البريد الالكتروني">

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="()=>UpdateForm()" class="btn btn-primary btn-save">
                        حفظ
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>


@code{


    public UserModel User { get; set; } = new UserModel();
    [Parameter]
    public EventCallback StateChanged { get; set; }
    [Parameter]
    public ApplicationUser ApplicationUser { get; set; } = new ApplicationUser();
    protected async override Task OnInitializedAsync()
    {
        try
        {

            User.Name = ApplicationUser.Name;
            User.Email = ApplicationUser.Email;


        }
        catch (Exception e)
        {

        }

    }



    private async Task UpdateForm()
    {
        try
        {
             UnitOfwork.UserRepository.Update(ApplicationUser.Id);
            await jsRuntime.ToastrSuccess("تمت العملية بنجاح");
            await StateChanged.InvokeAsync();
            await jsRuntime.InvokeVoidAsync("modalState", "#modal_customer", "hide");
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

}